#+OPTIONS: <:nil c:nil todo:nil toc:nil tags:nil broken-links:t

This document shows how it is possible to incorporate results, statistics, and plots generated by a separate process---e.g., via GNU Make---in a document compiled via \LaTeX{}.

* LaTeX Configuration :noexport:
#+macro: pythonval src_python[:session :results raw]{$1}
#+LATEX_CLASS_OPTIONS: [10pt]

#+begin_src python :session :results none :exports none
import pickle
with open("../results/processed_results_data.pickle", 'rb') as handle:
    d = pickle.load(handle)
#+end_src

* Including results via Python and Org Mode

I often use Org-Mode when writing publications and grants, as it is a featureful markup language that can be exported to \LaTeX{}. When exported, Org can be configured to run code blocks and include variables from that code block inline with the text. For example, the document can be made to include results statistics generated via =make process-results=.

* Example experiment section
In experiments, we evaluated the relative performance with and without the inclusion of \textsc{ransac} when fitting a line to our noisy data across {{{pythonval(d['num_seeds'])}}} procedurally generated examples. Our performance target was a reduction in mean squared error (\textsc{mse}) on the held out evaluation sets for each.
The \textsc{mse} for Least Squares alone was  {{{pythonval(f"{d['mse_lstsq']:0.2f}")}}} compared to a \textsc{mse} of {{{pythonval(f"{d['mse_ransac']:0.2f}")}}} when using \textsc{ransac}, an improvement of
{{{pythonval(f"{100*(d['mse_lstsq'] - d['mse_ransac'])/d['mse_lstsq']:0.1f}")}}}%. We additionally show a scatterplot of the results, in which each point corresponds to the performance for each approach on a single set of randomly generated data:

\vspace{-1em}
#+ATTR_LATEX: :placement [h] :width 2.5in
#+LABEL: fig:scatterplot
#+CAPTION: Scatterplot showing the improvement RANSAC affords. Figure auto-exported from Inkscape via GNU Make
[[file:figures/scatterplot.png]]
